{"paragraphs":[{"title":"Exibir databases","text":"%pyspark\nspark.sql(\"show databases\").show()\n","user":"anonymous","dateUpdated":"2020-03-07T17:13:02+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------------+\n|      databaseName|\n+------------------+\n|  db_ecommerce_dev|\n|  db_ecommerce_raw|\n|           default|\n|          sampledb|\n|sessions_ecommerce|\n+------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1583601089737_-1499539952","id":"20181208-134230_1861185261","dateCreated":"2020-03-07T17:11:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:277","dateFinished":"2020-03-07T17:13:02+0000","dateStarted":"2020-03-07T17:13:02+0000"},{"title":"Acessar database e exibir tabelas","text":"%pyspark\nspark.sql(\"use sessions_ecommerce\")\nspark.sql(\"show tables\").show()","user":"anonymous","dateUpdated":"2020-03-07T17:14:00+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------------+----------+-----------+\n|          database| tableName|isTemporary|\n+------------------+----------+-----------+\n|sessions_ecommerce|aggregated|      false|\n|sessions_ecommerce|   rawdata|      false|\n+------------------+----------+-----------+\n\n"}]},"apps":[],"jobName":"paragraph_1583601089742_675567559","id":"20181208-134259_1561086742","dateCreated":"2020-03-07T17:11:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:278","dateFinished":"2020-03-07T17:14:01+0000","dateStarted":"2020-03-07T17:14:00+0000"},{"title":"selecionar tabela rawdata","text":"%pyspark\ndf = spark.sql(\"select * from sessions_ecommerce.rawdata\")\ndf.show()","user":"anonymous","dateUpdated":"2020-03-07T17:11:29+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1583601089742_-1882002005","id":"20181208-134500_546755517","dateCreated":"2020-03-07T17:11:29+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:279"},{"title":"Também é possível acessar diretamente o S3 em vez de ler tabelas","text":"%pyspark\n# substitua o <bucket-name> pelo nome do seu bucket. Coloque ano, mes, dia e hora que exista no seu bucket s3. \n# df = spark.read.json(\"s3://<bucket-name>/rawdata/ano/mes/dia/hora/\")\ndf = spark.read.json(\"s3://time-conta7-demo-ecomm-bucket-stream/rawdata/2020/03/07/14/\")\ndf.show()\n","user":"anonymous","dateUpdated":"2020-03-07T18:22:33+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1583601089742_1130855664","id":"20181208-134540_1669931981","dateCreated":"2020-03-07T17:11:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:280","dateFinished":"2020-03-07T18:22:34+0000","dateStarted":"2020-03-07T18:22:33+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+----------+------------+------------------+--------------------+-------------------+\n|custid|    device|touchproduct|       trafficfrom|     trans_timestamp|                url|\n+------+----------+------------+------------------+--------------------+-------------------+\n|   129|app_mobile|         236|       twitter.com|2020-03-07T14:05:...|beer_product_detail|\n|   528|app_tablet|         187|    Jao_Cervejeiro|2020-03-07T14:05:...|beer_product_detail|\n|   115|   browser|           0|             Alexa|2020-03-07T14:05:...|   beer_vitrine_nav|\n|   417|app_tablet|           0|             Alexa|2020-03-07T14:05:...|   beer_vitrine_nav|\n|   423|app_mobile|          25|        amazon.com|2020-03-07T14:05:...|beer_product_detail|\n|   412|app_mobile|           0|    Jao_Cervejeiro|2020-03-07T14:05:...|   beer_vitrine_nav|\n|   523|   browser|           0|            google|2020-03-07T14:05:...|   beer_vitrine_nav|\n|   203|app_mobile|         178|        BeerHug_TV|2020-03-07T14:05:...|      beer_checkout|\n|   120|app_tablet|          72|        amazon.com|2020-03-07T14:05:...|      beer_checkout|\n|   420|app_mobile|         168| email_MyFirstBeer|2020-03-07T14:05:...|      beer_checkout|\n|   546|app_tablet|           0|             Alexa|2020-03-07T14:05:...|   beer_vitrine_nav|\n|   350|app_mobile|           0|            google|2020-03-07T14:05:...|   beer_vitrine_nav|\n|   214|app_mobile|          88|email_CampanhaBeer|2020-03-07T14:05:...|      beer_checkout|\n|   302|app_mobile|           0|        amazon.com|2020-03-07T14:05:...|   beer_vitrine_nav|\n|   145|app_tablet|         186|        amazon.com|2020-03-07T14:05:...|beer_product_detail|\n|   450|app_mobile|           0|        amazon.com|2020-03-07T14:05:...|   beer_vitrine_nav|\n|   412|app_tablet|           0|        amazon.com|2020-03-07T14:05:...|   beer_vitrine_nav|\n|   442|   browser|           0|        amazon.com|2020-03-07T14:05:...|   beer_vitrine_nav|\n|   130|   browser|          69|            google|2020-03-07T14:05:...|beer_product_detail|\n|   247|app_tablet|         179|email_CampanhaBeer|2020-03-07T14:05:...|beer_product_detail|\n+------+----------+------------+------------------+--------------------+-------------------+\nonly showing top 20 rows\n\n"}]}},{"text":"%pyspark\nfrom pyspark.sql.types import *\n# substitua o <bucket-name> pelo nome do seu bucket. Coloque ano, mes, dia e hora que exista no seu bucket s3\n# df = spark.read.csv(\"s3://<bucket-name>/aggregated/ano/mes/dia/hora/\")\nschema = StructType([StructField('sessionid', StringType(), True),\n          StructField('userid', StringType(), True),\n          StructField('device', StringType(), True),\n          StructField('aggreg_time', TimestampType(), True),\n          StructField('events', StringType(), True),\n          StructField('beginurl', StringType(), True),\n          StructField('endurl', StringType(), True),\n          StructField('begin_min_ss', StringType(), True),\n          StructField('end_min_ss', StringType(), True),\n          StructField('totaltime_sec', StringType(), True)])\n\ndf2 = spark.read.csv(\"s3://time-conta7-demo-ecomm-bucket-stream/aggregated/2020/03/07/14/\", schema=schema)\n\ndf2.show()","user":"anonymous","dateUpdated":"2020-03-07T17:52:25+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1583601089742_55707170","id":"20181208-140532_192880319","dateCreated":"2020-03-07T17:11:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:281","dateFinished":"2020-03-07T17:51:11+0000","dateStarted":"2020-03-07T17:51:11+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------------+------+----------+-------------------+------+-------------------+-------------------+------------+----------+-------------+\n|        sessionid|userid|    device|        aggreg_time|events|           beginurl|             endurl|begin_min_ss|end_min_ss|totaltime_sec|\n+-----------------+------+----------+-------------------+------+-------------------+-------------------+------------+----------+-------------+\n|118_APP1583589840|   118|app_mobile|2020-03-07 14:04:00|     1|beer_product_detail|beer_product_detail|       04:56|     04:56|            0|\n|335_APP1583589840|   335|app_tablet|2020-03-07 14:04:00|     1|   beer_vitrine_nav|   beer_vitrine_nav|       04:56|     04:56|            0|\n|418_APP1583589840|   418|app_mobile|2020-03-07 14:04:00|     2|          beer_cart|beer_product_detail|       04:56|     04:59|            2|\n|322_BRO1583589840|   322|   browser|2020-03-07 14:04:00|     1|   beer_vitrine_nav|   beer_vitrine_nav|       04:56|     04:56|            0|\n|531_BRO1583589840|   531|   browser|2020-03-07 14:04:00|     1|          beer_cart|          beer_cart|       04:56|     04:56|            0|\n|316_BRO1583589840|   316|   browser|2020-03-07 14:04:00|     1|   beer_vitrine_nav|   beer_vitrine_nav|       04:56|     04:56|            0|\n|433_BRO1583589840|   433|   browser|2020-03-07 14:04:00|     1|beer_product_detail|beer_product_detail|       04:56|     04:56|            0|\n|348_APP1583589840|   348|app_tablet|2020-03-07 14:04:00|     1|   beer_vitrine_nav|   beer_vitrine_nav|       04:56|     04:56|            0|\n|233_APP1583589840|   233|app_tablet|2020-03-07 14:04:00|     1|beer_product_detail|beer_product_detail|       04:57|     04:57|            0|\n|115_APP1583589840|   115|app_mobile|2020-03-07 14:04:00|     1|beer_product_detail|beer_product_detail|       04:57|     04:57|            0|\n|107_APP1583589840|   107|app_tablet|2020-03-07 14:04:00|     1|   beer_vitrine_nav|   beer_vitrine_nav|       04:57|     04:57|            0|\n|517_APP1583589840|   517|app_tablet|2020-03-07 14:04:00|     1|   beer_vitrine_nav|   beer_vitrine_nav|       04:57|     04:57|            0|\n|100_BRO1583589840|   100|   browser|2020-03-07 14:04:00|     1|   beer_vitrine_nav|   beer_vitrine_nav|       04:57|     04:57|            0|\n|519_APP1583589840|   519|app_mobile|2020-03-07 14:04:00|     1|   beer_vitrine_nav|   beer_vitrine_nav|       04:57|     04:57|            0|\n|550_APP1583589840|   550|app_tablet|2020-03-07 14:04:00|     1|      beer_checkout|      beer_checkout|       04:57|     04:57|            0|\n|239_APP1583589840|   239|app_tablet|2020-03-07 14:04:00|     1|beer_product_detail|beer_product_detail|       04:57|     04:57|            0|\n|510_BRO1583589840|   510|   browser|2020-03-07 14:04:00|     1|   beer_vitrine_nav|   beer_vitrine_nav|       04:57|     04:57|            0|\n|519_APP1583589840|   519|app_tablet|2020-03-07 14:04:00|     1|beer_product_detail|beer_product_detail|       04:57|     04:57|            0|\n|130_APP1583589840|   130|app_mobile|2020-03-07 14:04:00|     1|beer_product_detail|beer_product_detail|       04:57|     04:57|            0|\n|327_APP1583589840|   327|app_tablet|2020-03-07 14:04:00|     1|beer_product_detail|beer_product_detail|       04:57|     04:57|            0|\n+-----------------+------+----------+-------------------+------+-------------------+-------------------+------------+----------+-------------+\nonly showing top 20 rows\n\n"}]}},{"title":"Gravar o dataframe em formato parquet em um bucket de destino","text":"%pyspark\n\nfrom pyspark.sql.functions import year, month, hour, col, dayofmonth\n\nDESTINO='s3://time-conta7-demo-ecomm-bucket-stream-analytics/agg_transactions/'\n\ndf2_partitioned = (df2\n    .withColumn('year', year(col('aggreg_time')))\n    .withColumn('month', month(col('aggreg_time')))\n    .withColumn('day', dayofmonth(col('aggreg_time')))\n    .withColumn('hour', hour(col('aggreg_time')))\n    )\n\ndf2_partitioned.write \\\n    .partitionBy('year','month','day','hour') \\\n    .mode('overwrite') \\\n    .format('parquet') \\\n    .option(\"compression\", \"snappy\") \\\n    .saveAsTable('sessions_ecommerce.agg_transactions', path=DESTINO)\n    \nDESTINO='s3://time-conta7-demo-ecomm-bucket-stream-analytics/raw_transactions/'\n\ndf_partitioned = (df\n    .withColumn('year', year(col('trans_timestamp').cast('timestamp')))\n    .withColumn('month', month(col('trans_timestamp').cast('timestamp')))\n    .withColumn('day', dayofmonth(col('trans_timestamp').cast('timestamp')))\n    .withColumn('hour', hour(col('trans_timestamp').cast('timestamp')))\n    )\n\ndf_partitioned.write \\\n    .partitionBy('year','month','day','hour') \\\n    .mode('overwrite') \\\n    .format('parquet') \\\n    .option(\"compression\", \"snappy\") \\\n    .saveAsTable('sessions_ecommerce.raw_transactions', path=DESTINO)\n","user":"anonymous","dateUpdated":"2020-03-07T18:25:46+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1583601089743_20968005","id":"20190412-232253_1471290996","dateCreated":"2020-03-07T17:11:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:282","dateFinished":"2020-03-07T18:26:12+0000","dateStarted":"2020-03-07T18:25:46+0000"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2020-03-07T17:11:29+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1583601089743_235377712","id":"20190412-232348_380602243","dateCreated":"2020-03-07T17:11:29+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:283"}],"name":"Desafio AWS","id":"2F5UX3JPE","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}